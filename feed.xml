<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/huaizhixu/Huaizhi-Blog</id><title>RSS feed of huaizhixu's Huaizhi-Blog</title><updated>2023-04-12T08:21:53.798579+00:00</updated><author><name>huaizhixu</name><email>yuquanxu0713@gmail.com</email></author><link href="https://github.com/huaizhixu/Huaizhi-Blog"/><link href="https://raw.githubusercontent.com/huaizhixu/Huaizhi-Blog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/13</id><title>ubuntu下绑定USB设备的串口名称</title><updated>2023-04-12T08:21:54.133188+00:00</updated><content type="html"><![CDATA[<p>在嵌入式开发和其它过程中，往往会出现USB设备的接入。但是对于多个USB设备接入时，由于操作系统的ttyUSB<em>的动态分配原则，不同设备之间可能存在USB设备文件更新不及时的冲突。而且设备驱动和ROS的launch文件也经常需要更换ttyUSB</em>的设备编号配置。并且每一次需要更新设备读写权限，较为麻烦。
在Linux中通过设置USB rules配置文件的方式来进行配置，通过识别设备的芯片编号绑定将设备绑定到固定的设备文件符中。
主要流程如下：
1.查询设备的硬件编号。
2.根据硬件编号设置rules文件。
3.重新启动udev serveice 更新配置文件。
4.重新插拔设备，查看设备文件符。</p>
<h2>查询设备硬件编号</h2>
<p><kbd>udevadm info --attribute-walk --name=/dev/ttyUSB0</kbd></p>
<p><img src="https://user-images.githubusercontent.com/108015790/224951536-5c4f7ae8-cb89-4957-b9d3-cfdd0f574ea2.png" alt="image" /></p>
<p>其中<code>ATTRS{idProduct}</code>和<code>ATTRS{idVendor}</code>代表设备的硬件芯片信息。是操作系统内核识别设备的关键。
使用<code>lsusb</code>命令直接查看所有设备的关键信息如下：
<img src="https://user-images.githubusercontent.com/108015790/224951982-056a134d-4cd4-4ee4-933c-db756723d2a0.png" alt="image" /></p>
<h2>添加<code>udev rules</code>规则文件<a href="https://wangpengcheng.github.io/2019/09/18/change_usb_rules_ubuntu/#%E6%B7%BB%E5%8A%A0udev-rules%E8%A7%84%E5%88%99%E6%96%87%E4%BB%B6"></a></h2>
<p><em>参考链接：</em> <a href="https://linux.cn/article-6449-1.html?utm_source=weixin">如何在 Linux 中永久修改 USB 设备权限</a>;<a href="https://blog.csdn.net/jiangchao3392/article/details/76227180">ubuntu 16.04 中永久修改 USB 设备权限</a></p>
<p>设备规则文件在Ubuntu中存放在<code>/etc/udev/rules.d/</code>文件夹下。可以在此文件夹中添加自定义的以<code>.rules</code>的文件。</p>
<p>udev的规则的匹配关键键内容如下：</p>
<table>
<thead>
<tr>
<th>关键键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACTION</td>
<td>事件 (uevent)的行为，例如：add( 添加设备 )、remove(删除设备 )。</td>
</tr>
<tr>
<td>KERNEL</td>
<td>在内核里看到的设备名字，比如sd*表示任意SCSI磁盘设备</td>
</tr>
<tr>
<td>DEVPATH</td>
<td>内核设备录进，比如/devices/*</td>
</tr>
<tr>
<td>SUBSYSTEM</td>
<td>子系统名字，例如：sda的子系统为 block。</td>
</tr>
<tr>
<td>BUS</td>
<td>总线的名字，比如IDE,USB</td>
</tr>
<tr>
<td>DRIVER</td>
<td>设备驱动的名字，比如ide-cdrom</td>
</tr>
<tr>
<td>ID</td>
<td>独立于内核名字的设备名字</td>
</tr>
<tr>
<td>SYSFS{value}</td>
<td>sysfs属性值，他可以表示任意</td>
</tr>
<tr>
<td>ENV{ key}</td>
<td>环境变量，可以表示任意</td>
</tr>
<tr>
<td>PROGRAM</td>
<td>可执行的外部程序，如果程序返回0值，该键则认为为真(true)</td>
</tr>
<tr>
<td>RESULT</td>
<td>上一个PROGRAM调用返回的标准输出。</td>
</tr>
<tr>
<td>NAME</td>
<td>根据这个规则创建的设备文件的文件名。<strong>注意：仅仅第一行的NAME描述是有效的，后面的均忽略。如果你想使用使用两个以上的名字来访问一个设备的话，可以考虑SYMLINK键。</strong></td>
</tr>
<tr>
<td>SYMLINK</td>
<td>为 /dev/下的设备文件产生符号链接。由于 udev只能为某个设备产生一个设备文件，<strong>所以为了不覆盖系统默认的 udev规则所产生的文件，推荐使用符号链接。</strong></td>
</tr>
<tr>
<td>OWNER</td>
<td>设备文件的属组</td>
</tr>
<tr>
<td>GROUP</td>
<td>设备文件所在的组。</td>
</tr>
<tr>
<td>MODE</td>
<td>设备文件的权限，采用8进制</td>
</tr>
<tr>
<td>RUN</td>
<td>为设备而执行的程序列表</td>
</tr>
<tr>
<td>LABEL</td>
<td>在配置文件里为内部控制而采用的名字标签(下下面的GOTO服务)</td>
</tr>
<tr>
<td>GOTO</td>
<td>跳到匹配的规则（通过LABEL来标识），有点类似程序语言中的GOTO</td>
</tr>
<tr>
<td>IMPORT{type}</td>
<td>导入一个文件或者一个程序执行后而生成的规则集到当前文件</td>
</tr>
<tr>
<td>WAIT_FOR_SYSFS</td>
<td>等待一个特定的设备文件的创建。主要是用作时序和依赖问题。</td>
</tr>
<tr>
<td>PTIONS</td>
<td>特定的选项：</td>
</tr>
<tr>
<td>last_rule</td>
<td>对这类设备终端规则执行；</td>
</tr>
<tr>
<td>ignore_device</td>
<td>忽略当前规则；</td>
</tr>
<tr>
<td>ignore_remove</td>
<td>忽略接下来的并移走请求。</td>
</tr>
<tr>
<td>all_partitions</td>
<td>为所有的磁盘分区创建设备文件。</td>
</tr>
</tbody></table><p>在<code>/etc/udev/rules.d</code>文件夹下创建自定义<code>my_usb_rules.rules</code>文件内容如下</p>
<pre><code># ultrasonic_radar usb rules
KERNEL==&quot;ttyUSB*&quot;, SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;10c4&quot;, ATTRS{idProduct}==&quot;ea60&quot;, GROUP=&quot;users&quot;, MODE=&quot;0666&quot;, ENV{ID_MM_DEVICE_IGNORE}=&quot;1&quot;, SYMLINK+=&quot;ultrasonic_radar&quot;
# imu usb rules
KERNEL==&quot;ttyUSB*&quot;, SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;0403&quot;, ATTRS{idProduct}==&quot;6001&quot;, GROUP=&quot;users&quot;, MODE=&quot;0666&quot;, ENV{ID_MM_DEVICE_IGNORE}=&quot;1&quot;, SYMLINK+=&quot;imu&quot;
</code></pre>
<p>注意： 这里的<code>ATTRS{idVendor}</code>和<code>ATTRS{idProduct}</code>是查询到的对应的设备地芯片的硬件值。<code>SYMLINK+=</code>对应的是对设备<code>ttyUSB*</code>生成的软连接名称。<code>MODE</code>是对设备权限的更改。**一定要添加<code>KERNEL==&quot;ttyUSB*&quot;</code>**生成软连接。否则直接生成对名称的设备号。一般的linux驱动无法识别。</p>
<h3>重启服务查看 对应设备[]</h3>
<pre><code>ls -l /dev |grep ttyUSB

</code></pre>
<p><img src="https://user-images.githubusercontent.com/108015790/224952956-2d6d7ef5-7130-4f97-82ba-953cfefb113f.png" alt="image" /></p>
<p>当添加或者删除udev的rules文件后，都需要使用如下命令，进行设备读取rules的更新</p>
<pre><code>sudo service udev reload
sudo service udev restart
</code></pre>
<p><strong>然后重新插拔USB设备，就可以按照新的规则执行了</strong>。</p>
<p>使用<code>cutecom</code>查看串口通信结果</p>
<p><strong>注意：这里是根据设备芯片类进行的配置具有唯一性，一个规则只能配置一种设备，两个设备是同种设备时不能由设备芯片进行识别区分</strong></p>
<h2>KERNELS硬件端口号绑定USB串口名称(推荐使用)</h2>
<p>通过以下命令查看ttyUSB0的KERNELS硬件端口号：
<kbd>udevadm info --attribute-walk --name=/dev/ttyUSB0</kbd></p>
<pre><code>udevadm info --attribute-walk --name=/dev/ttyUSB0
</code></pre>
<p><img src="https://user-images.githubusercontent.com/108015790/224954392-813a4037-b194-4104-9ea6-0b3dbd581fd9.png" alt="image" /></p>
<p>在第三个looking at...的下方，就是这个USB 设备的KERNELS硬件端口号：KERNELS == &quot;3-1:1.0&quot;。</p>
<p>在/etc/udev/rule.d 下产生相应的规则文件，将ttyUSB0命名为你喜欢的名字。</p>
<p>首先，通过以下命令创建规则文件：</p>
<pre><code>sudo vim /etc/udev/rules.d/usb.rules
</code></pre>
<p>在打开的文本框里输入以下代码，保存退出：</p>
<pre><code>KERNELS==&quot;3-1:1.0&quot;, MODE:=&quot;0777&quot;, GROUP:=&quot;dialout&quot;, SYMLINK+=&quot;usb_rplidar&quot;
</code></pre>
<p>通过以上两步，就把ttyUSB0取别名为usb_rplidar，以后在程序里直接访问usb_rplidar，就可以与这个设备通信了。</p>
<p>运行以下命令使修改立即生效：</p>
<pre><code>sudo udevadm trigger
</code></pre>
<p>重复步骤，用同样的办法把剩下的USB设备重命名。</p>
<p>把所有USB设备重命名后，运行以下命令查看USB设备名更改情况：</p>
<pre><code>ls -l /dev |grep ttyUSB
</code></pre>
<p>至此，所有的USB设备都被唯一的绑定到自定义的名字上，再也不用担心设备号窜动了。</p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/13" rel="alternate"/><category term="Linux"/><published>2023-03-14T09:24:55+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/12</id><title>ROS的相关的笔记</title><updated>2023-04-12T08:21:54.278794+00:00</updated><content type="html"><![CDATA[<p>1、相关的<kbd>rostopic </kbd>的操作
输出所有发布的话题：
<kbd>rostopic list</kbd></p>
<p>输出话题的类型：
<kbd>rostopic type /joy | rosmsg show</kbd></p>
<p>命令行发布话题的类型：
<kbd>rostopic pub -1 /myrobot/leg1423_Effort_controller/command std_msgs/Float64MultiArray &quot;data: [1.23,-1.23,-1.23,1.23]&quot;</kbd></p>
<p>2、有用的网站参考链接
<a href="https://github.com/facontidavide/PlotJuggler">PlotJuggler绘图</a></p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/12" rel="alternate"/><category term="ROS"/><published>2023-02-08T02:34:03+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/11</id><title>ros中如何define roll, pitch, and yaw，找到的比较权威的解释</title><updated>2023-04-12T08:21:54.391450+00:00</updated><content type="html"><![CDATA[<p>To define roll, pitch, and yaw in linear systems, we first need to establish the three primary axes: X, Y, and Z.</p>
<p><img src="https://user-images.githubusercontent.com/108015790/210919732-4d3906fb-cb5e-49c7-8fa4-9116e36cdca1.jpg" alt="Roll-Pitch-Yaw" /></p>
<p>The two axes of the horizontal plane are typically defined as X and Y, with the X axis being in the direction of motion. The Y axis is orthogonal (perpendicular) to the direction of motion and is also in the horizontal plane. The Z axis is orthogonal to both the X and Y axes, but it is located in the vertical plane. (To find the positive direction of the Z axis, use the <a href="https://mathworld.wolfram.com/Right-HandRule.html">right-hand rule</a>: point the index finger in the direction of positive X, then curl it in the direction of positive Y, and the thumb will indicate positive Z.)</p>
<hr />
<p><em>In multi-axis systems, the direction of travel of the bottom axis is typically defined as the X axis. If the next axis above it is also horizontal, that axis is defined as Y, and the vertical axis (even if it is the second axis, directly on top of X), is defined as the Z axis.</em></p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/11" rel="alternate"/><category term="ROS"/><published>2023-01-06T02:49:06+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/10</id><title>从远程仓库获取最新代码合并到本地分支</title><updated>2023-04-12T08:21:54.537216+00:00</updated><content type="html"><![CDATA[<h2>1.git pull：获取最新代码到本地，并自动合并到当前分支</h2>
<p>命令展示</p>
<pre><code>//查询当前远程的版本
$ git remote -v
//直接拉取并合并最新代码
$ git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]
$ git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]
</code></pre>
<p>分析：不推荐这种方式，因为是直接合并，无法提前处理冲突。</p>
<h2>2.git fetch + merge: 获取最新代码到本地，然后手动合并分支</h2>
<h3>2.1.额外建立本地分支</h3>
<p>代码展示</p>
<pre><code>//查看当前远程的版本
$ git remote -v 
//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])
$ git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]
$ git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]
//查看版本差异
$ git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]
$ git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]
//合并最新分支到本地分支
$ git merge master1    [示例1：合并本地分支master1到当前分支]
$ git merge dev1   [示例2：合并本地分支dev1到当前分支]
//删除本地临时分支
$ git branch -D master1    [示例1：删除本地分支master1]
$ git branch -D dev1 [示例1：删除本地分支dev1]
</code></pre>
<p>备注：不推荐这种方式，还需要额外对临时分支进行处理。</p>
<h3>2.2.不额外建立本地分支</h3>
<p>代码展示</p>
<pre><code>//查询当前远程的版本
$ git remote -v
//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])
$ git fetch origin master  [示例1：获取远端的origin/master分支]
$ git fetch origin dev [示例2：获取远端的origin/dev分支]
//查看版本差异
$ git log -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]
$ git log -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]
//合并最新代码到本地分支
$ git merge origin/master  [示例1：合并远端分支origin/master到当前分支]
$ git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]
</code></pre>
<p>备注：推荐这种方式</p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/10" rel="alternate"/><category term="git"/><published>2022-12-15T01:33:43+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/9</id><title>Linux使用</title><updated>2023-04-12T08:21:54.677624+00:00</updated><content type="html"><![CDATA[<p>查看系统信息</p>
<pre><code>cat /etc/issue

Ubuntu 20.04.2 LTS \n \l

</code></pre>
<p>Ubuntu的apt-get代理设置
在命令行临时带入
在命令行后面增加-o选项</p>
<pre><code>sudo apt-get -o Acquire::http::proxy=&quot;http://127.0.0.1:8889/&quot; update
</code></pre>
<p>制作Gif动图
在视频保存路径下，运行 <kbd>ffmpeg -i 视频.mp4 out.gif</kbd> 即可输出Gif动图。</p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/9" rel="alternate"/><category term="笔记"/><published>2022-12-14T01:17:48+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/8</id><title>在vim和tmux中开启真彩色</title><updated>2023-04-12T08:21:54.800724+00:00</updated><content type="html"><![CDATA[<p>在 vim 和 tmux 中开启真彩色，可以获得更好的视觉体验。</p>
<p>在 vimrc 中加入下面的设置：</p>
<pre><code>if exists(&#x27;+termguicolors&#x27;)
  let &amp;t_8f = &quot;\&lt;Esc&gt;[38;2;%lu;%lu;%lum&quot;
  let &amp;t_8b = &quot;\&lt;Esc&gt;[48;2;%lu;%lu;%lum&quot;
  set termguicolors
endif
</code></pre>
<p>Tmux 需要在 <code>.tmux.conf</code> 配置文件里添加下面的内容：</p>
<pre><code>set -g default-terminal tmux-256color  # 这里也可设置成 screen-256color
set-option -ga terminal-overrides &quot;,*256col*:Tc&quot;
</code></pre>
<p>退出所有的 tmux，再重新打开，就可以了。</p>
<p>如何验证 true color 是否开启成功？验证 vim 的话，在 vim 里用 <code>:terminal</code> 命令打开自带的终端，执行下面的命令<sup id="fnref:1"><a href="https://www.littlezhang.com/2020/11/vim-tips%E5%9C%A8vim%E5%92%8Ctmux%E4%B8%AD%E5%BC%80%E5%90%AF%E7%9C%9F%E5%BD%A9%E8%89%B2/#fn:1" role="doc-noteref">1</a></sup>：</p>
<pre><code>awk &#x27;BEGIN{
    s=&quot;/\\/\\/\\/\\/\\&quot;; s=s s s s s s s s;
    for (colnum = 0; colnum&lt;77; colnum++) {
        r = 255-(colnum*255/76);
        g = (colnum*510/76);
        b = (colnum*255/76);
        if (g&gt;255) g = 510-g;
        printf &quot;\033[48;2;%d;%d;%dm&quot;, r,g,b;
        printf &quot;\033[38;2;%d;%d;%dm&quot;, 255-r,255-g,255-b;
        printf &quot;%s\033[0m&quot;, substr(s,colnum+1,1);
    }
    printf &quot;\n&quot;;
}&#x27;
</code></pre>
<p>验证 tmux，则打开 tmux 后直接在命令行执行上面的命令。</p>
<p>如果显示的是连续的颜色，则已经开启成功；</p>
<p><a href="https://res.cloudinary.com/dny1wymwm/image/upload/v1604978492/true_color_wsl_fyxv15.png"><img src="https://res.cloudinary.com/dny1wymwm/image/upload/v1604978492/true_color_wsl_fyxv15.png" alt="" /></a></p>
<p>如果是间断的颜色，则设置失败。</p>
<p><a href="https://res.cloudinary.com/dny1wymwm/image/upload/v1604978492/no_true_color_qcgnc1.png"><img src="https://res.cloudinary.com/dny1wymwm/image/upload/v1604978492/no_true_color_qcgnc1.png" alt="" /></a></p>
<p><strong>参考链接</strong></p>
<ul>
<li>
<p><a href="https://lotabout.me/2018/true-color-for-tmux-and-vim/">https://lotabout.me/2018/true-color-for-tmux-and-vim/</a></p>
</li>
<li>
<p><a href="https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/">https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/</a>
__</p>
</li>
</ul>
<ol>
<li><a href="https://gist.github.com/XVilka/8346728">https://gist.github.com/XVilka/8346728</a> <a href="https://www.littlezhang.com/2020/11/vim-tips%E5%9C%A8vim%E5%92%8Ctmux%E4%B8%AD%E5%BC%80%E5%90%AF%E7%9C%9F%E5%BD%A9%E8%89%B2/#fnref:1">↩︎</a></li>
</ol>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/8" rel="alternate"/><published>2022-12-09T01:51:04+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/7</id><title>ubuntu20.04设置固定ip</title><updated>2023-04-12T08:21:54.964452+00:00</updated><content type="html"><![CDATA[<p>ubuntu 从 17.10 开始，已放弃在 /etc/network/interfaces 里固定 IP 的配置，interfaces 文件不复存在，即使配置也不会生效，而是改成 netplan 方式 ，配置写在 /etc/netplan/01-netcfg.yaml 或者类似名称的 yaml 文件里。</p>
<pre><code>sudo vim /etc/netplan/01-installer-config.yaml

</code></pre>
<pre><code>network:
  ethernets:
    ens160:     #配置的网卡的名称
      addresses: [192.168.0.105/24]    #配置的静态ip地址和掩码
      dhcp4: no    #关闭DHCP，如果需要打开DHCP则写yes
      optional: true
      gateway4: 192.168.0.1    #网关地址
      nameservers:
         addresses: [114.114.114.114,180.76.76.76]    #DNS服务器地址，多个DNS服务器地址需要用英文逗号分隔开
  version: 2
  renderer: networkd    #指定后端采用systemd-networkd或者Network Manager，可不填写则默认使用systemd-workd
</code></pre>
<h2>生效配置&amp;查看状态</h2>
<pre><code>sudo netplan apply
networkctl status 
</code></pre>
<h2>测试</h2>
<p>先 ping 内网的网关，确认内网是否通</p>
<pre><code>ping 192.168.1.1
</code></pre>
<p>再 ping 一下外网的 IP ，确认是否可以访问外网。</p>
<pre><code>ping 114.114.114.114
</code></pre>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/7" rel="alternate"/><category term="笔记"/><published>2022-09-29T09:25:48+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/6</id><title>terminator快捷键</title><updated>2023-04-12T08:21:55.125939+00:00</updated><content type="html"><![CDATA[<pre><code>//第一部份：关于在同一个标签内的操作
Alt+Up                          //移动到上面的终端
Alt+Down                        //移动到下面的终端
Alt+Left                        //移动到左边的终端
Alt+Right                       //移动到右边的终端
Ctrl+Shift+O                    //水平分割终端
Ctrl+Shift+E                    //垂直分割终端
Ctrl+Shift+Right                //在垂直分割的终端中将分割条向右移动
Ctrl+Shift+Left                 //在垂直分割的终端中将分割条向左移动
Ctrl+Shift+Up                   //在水平分割的终端中将分割条向上移动
Ctrl+Shift+Down                 //在水平分割的终端中将分割条向下移动
Ctrl+Shift+S                    //隐藏/显示滚动条
Ctrl+Shift+F                    //搜索
Ctrl+Shift+C                    //复制选中的内容到剪贴板
Ctrl+Shift+V                    //粘贴剪贴板的内容到此处
Ctrl+Shift+W                    //关闭当前终端
Ctrl+Shift+Q                    //退出当前窗口，当前窗口的所有终端都将被关闭
Ctrl+Shift+X                    //最大化显示当前终端
Ctrl+Shift+Z                    //最大化显示当前终端并使字体放大
Ctrl+Shift+N or Ctrl+Tab        //移动到下一个终端
Ctrl+Shift+P or Ctrl+Shift+Tab  //Crtl+Shift+Tab 移动到之前的一个终端
 
//第二部份：有关各个标签之间的操作
F11                             //全屏开关
Ctrl+Shift+T                    //打开一个新的标签
Ctrl+PageDown                   //移动到下一个标签
Ctrl+PageUp                     //移动到上一个标签
Ctrl+Shift+PageDown             //将当前标签与其后一个标签交换位置
Ctrl+Shift+PageUp               //将当前标签与其前一个标签交换位置
Ctrl+Plus (+)                   //增大字体
Ctrl+Minus (-)                  //减小字体
Ctrl+Zero (0)                   //恢复字体到原始大小
Ctrl+Shift+R                    //重置终端状态
Ctrl+Shift+G                    //重置终端状态并clear屏幕
Super+g                         //绑定所有的终端，以便向一个输入能够输入到所有的终端
Super+Shift+G                   //解除绑定
Super+t                         //绑定当前标签的所有终端，向一个终端输入的内容会自动输入到其他终端
Super+Shift+T                   //解除绑定
Ctrl+Shift+I                    //打开一个窗口，新窗口与原来的窗口使用同一个进程
Super+i                         //打开一个新窗口，新窗口与原来的窗口使用不同的进程

</code></pre>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/6" rel="alternate"/><category term="笔记"/><published>2022-09-28T09:01:59+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/5</id><title>git使用笔记</title><updated>2023-04-12T08:21:55.255438+00:00</updated><content type="html"><![CDATA[<h2>Git本次修改合并到上次提交</h2>
<p>有时候为了减少提交日志，并且添加的内容是与上次的内容属于同一个提交内容的，为了好维护，会将本次的提交追加到上次的提交中。使用git 命令如下：</p>
<pre><code>git add .                           (添加提交内容)
git commit --amend        (追加到上次提交)#会通过core.editor指定的编辑器进行编辑
git commit --amend --no-edit      #不打开命令行，直接提交
</code></pre>
<h2>将Git默认编辑器更改为vim</h2>
<p>查看Git逻辑变量</p>
<pre><code>git var -l
将当前Git默认编辑器更改为vim
$ git config core.editor vim
将全局Git默认编辑器更改为vim
$ git config --global core.editor vim


</code></pre>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/5" rel="alternate"/><category term="笔记"/><published>2022-09-08T08:53:39+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/4</id><title>记录cp命令的一次问题</title><updated>2023-04-12T08:21:55.393271+00:00</updated><content type="html"><![CDATA[<h3>问题描述</h3>
<p>原因是这样的，在执行脚本的过程中，出现了
<img src="https://user-images.githubusercontent.com/108015790/184080966-55a8803f-3ee9-4d4f-a2da-1ba229705514.png" alt="Snipaste_2022-08-11_13-42-48" />
所示的错误，定位到的错误是cp -rf  ******的原因，将-r参数去掉之后成功执行程序。</p>
<h3>原因：</h3>
<p>在cp的过程中，-r的参数是对目录进行的操作。查阅相关的资料解释如下所示：
<img src="https://user-images.githubusercontent.com/108015790/184081545-d625a0fc-dd45-4f9c-a9d4-4833abf64b89.png" alt="image" />
也就是说在对目录操作的情况下才需要加上-r，单纯的文件要简单的进行复制。</p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/4" rel="alternate"/><category term="技术相关"/><published>2022-08-11T07:10:43+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/3</id><title>git commit 代码提交规范</title><updated>2023-04-12T08:21:55.533889+00:00</updated><content type="html"><![CDATA[<h5>格式：</h5>
<pre><code>type(scope) : subject

</code></pre>
<p>( 1 ) type（必须） : commit 的类别，只允许使用下面几个标识：</p>
<ul>
<li>feat : 新功能</li>
<li>fix : 修复bug</li>
<li>docs : 文档改变</li>
<li>style : 代码格式改变</li>
<li>refactor : 某个已有功能重构</li>
<li>perf : 性能优化</li>
<li>test : 增加测试</li>
<li>build : 改变了build工具 如 grunt换成了 npm</li>
<li>revert : 撤销上一次的 commit</li>
<li>chore : 构建过程或辅助工具的变动</li>
</ul>
<p>( 2 ) scope（可选） : 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<p>( 3 ) subject（必须） : commit 的简短描述，不超过50个字符。<br />
commitizen 是一个撰写合格 Commit message 的工具，<br />
遵循 Angular 的提交规范。</p>
<h3>制定适合我们的 git commit 提交规范</h3>
<h4>格式</h4>
<p><code>type: description</code></p>
<h4>1. type 类型</h4>
<p>type 是 commit 的类别，只允许如下几种标识：</p>
<ul>
<li>fix: 修复bug</li>
<li>add: 新功能</li>
<li>update: 更新</li>
<li>style : 代码格式改变</li>
<li>test: 增加测试代码</li>
<li>revert: 撤销上一次的commit</li>
<li>build: 构建工具或构建过程等的变动，如：gulp 换成了 webpack，webpack 升级等</li>
</ul>
<h4>2. description</h4>
<p>description 是对本次提交的简短描述。</p>
<p>不超过50个字符。</p>
<p>推荐以动词开头，如： 设置、修改、增加、删减、撤销等</p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/3" rel="alternate"/><category term="笔记"/><published>2022-08-09T00:53:38+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/2</id><title>win10开启ping服务 </title><updated>2023-04-12T08:21:55.666603+00:00</updated><content type="html"><![CDATA[<p>在ping服务时候，我ping别的ip可以通，但是别人<strong>ping</strong>我不同，在同一网段下，网上查了一下，说可能是我的某个服务没有开通，很有道理。现在把这个服务开通过程写出来，方便以后避免这样的低级错误。</p>
<p>控制面板--&gt;Windows防火墙--&gt;高级设置--&gt;入站规则--&gt;文件和打印机共享（回显请求ICMPv4-in），这个服务有两个，一个配置文件是“专用、公用”，一个是“域”，都启用就可以了。
<img src="https://user-images.githubusercontent.com/108015790/183322355-9efdff37-67ff-436e-b3fa-057730224cda.png" alt="image" />
如果是别人ping我能通，我ping别人不通，应该是他的入站规则，或者我的出站规则这个服务未启用。
<img src="https://user-images.githubusercontent.com/108015790/183324191-61bba81e-e475-4e8e-bda7-ef890be0da47.png" alt="image" /></p>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/2" rel="alternate"/><category term="bug"/><published>2022-08-08T10:00:14+00:00</published></entry><entry><id>https://github.com/huaizhixu/Huaizhi-Blog/issues/1</id><title>ubuntu环境下的代理工具</title><updated>2023-04-12T08:21:55.775524+00:00</updated><content type="html"><![CDATA[<h2>1、安装</h2>
<p>安装命令：
Debian / Ubuntu:</p>
<pre><code>apt-get install python-pip
pip install git+https://github.com/shadowsocks/shadowsocks.git@master
</code></pre>
<h2>2、配置</h2>
<p>首先对配置文件进行配置如下：</p>
<pre><code>vim /etc/shadowsocks/shadowsocks.json
</code></pre>
<p>配置文件：</p>
<pre><code>{ 
    &quot;server&quot;:&quot;xxx.xxx.xxx.xxx&quot;,
    &quot;server_port&quot;:xxx,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;xxx&quot;,
    &quot;timeout&quot;:600,
    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,
    &quot;fast_open&quot;: false,
    &quot;workers&quot;: 1
}

</code></pre>
<p>启动：</p>
<pre><code>sslocal -c /etc/shadowsocks/shadowsocks.json
</code></pre>
<h2>3、检查shadowsock客户端是否安装正常：</h2>
<pre><code>curl --socks5 127.0.0.1:1080 http://httpbin.org/ip
proxychains4 curl www.httpbin.org/ip

</code></pre>
<h2>proxychains4配置使用</h2>
<pre><code>sudo apt-get install proxychains4
</code></pre>
<p>修改配置文件：</p>
<pre><code>sudo vim /etc/proxychains.conf
</code></pre>
<p>在文本最后加上你的代理服务器地址:</p>
<pre><code>#[proxylist]
socks5 127.0.0.1 1080
</code></pre>
<pre><code>#各配置项用法如下：
#dynamic_chain：
#每个连接都将通过链接代理完成
＃所有代理按列表中显示的顺序链接
＃至少有一个代理必须在线才能使用
＃（跳过死的代理）
#strict_chain：该配置为ProxyChains的默认配置，同dynamic_chain一样，但所有代理必须正常，否则不能正常使用
#random_chain：该配置项会从ProxyList中随机选择代理IP来运行流量，如果ProxyList中有多个代理IP，在使用proxychains的时候会使用不同的代理访问目标主机，从而使主机端探测流量更加困难。
</code></pre>
<h2>ERROR method chacha20-ietf-poly1305 not supported 解决</h2>
<pre><code>install libsodium -y
pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U
</code></pre>
]]></content><link href="https://github.com/huaizhixu/Huaizhi-Blog/issues/1" rel="alternate"/><category term="技术相关"/><published>2022-08-08T09:11:15+00:00</published></entry></feed>